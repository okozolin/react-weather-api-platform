{"version":3,"sources":["components/Header.js","components/AlertsTable.js","services/http.js","config/ports.js","constants/index.js","services/api.js","components/Upload.js","services/delay.js","App.js","reportWebVitals.js","index.js"],"names":["Header","useState","Date","date","setDate","useEffect","intervalId","setInterval","clearInterval","Box","display","alignItems","justifyContent","fontFamily","fontSize","p","bgcolor","color","format","Typography","Moment","globalFormat","momentDurationSetup","moment","useStyles","makeStyles","table","minWidth","AlertsTable","alerts","classes","TableContainer","component","Paper","Table","className","TableHead","TableRow","TableCell","align","TableBody","length","map","row","city","currentTemp","condition","lastTriggered","duration","trim","status","style","http","axios","create","baseURL","headers","SUCCEEDED","Api","file","formData","FormData","append","post","response","data","Error","message","get","Upload","setUploaded","setFile","a","uploadFile","console","log","updateTable","my","Button","variant","backgroundColor","startIcon","type","hidden","onChange","e","target","files","delayedCall","uploaded","setLoader","refreshTable","ms","Promise","resolve","setTimeout","then","App","setAlerts","loader","show","Object","keys","getAlerts","m","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4447d32f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Box, Typography} from \"@material-ui/core\";\nimport Moment from \"react-moment\";\nimport FaceIcon from \"@material-ui/icons/Face\";\n\nMoment.globalFormat = \"D MMM YYYY\";\n\nexport default function Header() {\n    const [date, setDate] = useState(new Date())\n\nuseEffect(() => {\n    const intervalId = setInterval(() => setDate(new Date()), 1000)\n    return () => {\n        clearInterval(intervalId)\n    }\n},[])\n\n    return (\n        <Box \n            display=\"flex\" \n            alignItems=\"center\" \n            justifyContent=\"center\" \n            fontFamily='Roboto Condensed' \n            fontSize={56} p={4} \n            bgcolor=\"#06D6A0\" \n            color=\"#073B4C\">\n            <Moment format=\"DD/MM/YYYY HH:mm\">{date}</Moment>\n\n            <Box\n                alignItems=\"center\"\n                display=\"flex\"\n                color=\"#ce285d\"\n                >\n                <FaceIcon fontSize=\"large\" />\n                <Typography>oritkozolin</Typography>\n            </Box>\n        </Box>\n    )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper} from '@material-ui/core';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Moment from \"react-moment\";\nimport moment from \"moment\"\nimport momentDurationSetup from 'moment-duration-format';\n\nmomentDurationSetup(moment);\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function AlertsTable({alerts}) {\n    const classes = useStyles();\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>City</TableCell>\n                        <TableCell align=\"right\">Current Temprature</TableCell>\n                        <TableCell align=\"right\">Condition</TableCell>\n                        <TableCell align=\"right\">Last Triggered</TableCell>\n                        <TableCell align=\"right\">Duration</TableCell>\n                        <TableCell align=\"right\">Status</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {alerts.length ? alerts.map((row) => (\n                        <TableRow key={row.city}>\n                            <TableCell>{row.city}</TableCell>\n                            <TableCell align=\"right\">{row.currentTemp}</TableCell>\n                            <TableCell align=\"right\">{row.condition}</TableCell>\n                            <TableCell align=\"right\">\n                               {row.lastTriggered && <Moment format=\"DD/MM/YYYY HH:mm\">{row.lastTriggered}</Moment> }                               \n                            </TableCell>\n                            <TableCell align=\"right\">\n                                {row.duration ? (\n                                    moment.duration(row.duration).format(\"HH:mm:ss\", { trim: false })\n                                ): null}\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                {row.status ? <ErrorIcon style={{color: \"red\"}}/> : <CheckCircleIcon style={{color: \"#06D6A0\"}}/>}\n                            </TableCell>\n                        </TableRow>\n                    )) : null }\n                </TableBody>\n            </Table>            \n        </TableContainer>\n    )\n}\n","import axios from \"axios\";\nimport { SERVER_PORT } from \"../config/ports\"\n\nconst http =  axios.create({\n    baseURL: SERVER_PORT,\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  });\n\n  export default http;","export const SERVER_PORT = \"http://localhost:3000\"","export const SUCCEEDED = \"succeeded\"","\nimport http from \"./http\"\nimport { SUCCEEDED } from \"../constants\"  \n\nexport default class Api {\n  static async uploadFile(file) {\n    let formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await http.post(\n          \"/upload\", \n          formData, \n          {\n            headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            },\n          });\n      return {data: response.data, status: SUCCEEDED};\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n\n  static async getAlerts() {\n    try {\n      const response = await http.get(\"/alerts\")\n      return response;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n}\n","import React , {useEffect, useState} from 'react'\nimport { Box, Button} from \"@material-ui/core\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Api from \"../services/api\"\nimport {SUCCEEDED} from \"../constants\"\n\nexport default function Upload({setUploaded}) {\n    const [file, setFile] = useState(null)\n\n    useEffect(() => {\n        const updateTable = async () => {\n            if (file) {\n                const res = await Api.uploadFile(file)\n                if (res.status === SUCCEEDED) {\n                    setUploaded(true)    \n                }\n                else {\n                    setUploaded(false) \n                    console.log(\"Upload.js: Failed to load file\") \n                }  \n            }\n        }\n        updateTable()\n    }, [file])\n\n    const handleSelect = (e) => {\n        setFile(e.target.files[0])\n    }\n    return (\n        <Box my={4}>\n            <Button\n                variant=\"contained\"\n                component=\"label\"\n                style={{backgroundColor: \"#118AB2\", color: \"white\"}}\n                startIcon={<CloudUploadIcon />}\n            >\n                Upload CSV \n                <input \n                    type=\"file\" \n                    hidden\n                    onChange={handleSelect}\n                    />\n            </Button>\n        </Box>\n    )\n}\n","function delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n\nexport default function delayedCall( uploaded, setLoader, refreshTable ) {\nif (uploaded) {\n    setLoader(true)\n    delay(3000).then(() => {\n        refreshTable()\n        setLoader(false)\n    })\n}\n};\n\n","import {useState, useEffect} from \"react\"\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport Header from \"./components/Header\"\nimport AlertsTable from \"./components/AlertsTable\"\nimport Upload from \"./components/Upload\"\nimport Api from \"./services/api\"\nimport delayedCall from \"./services/delay\"\n\nfunction App() {\n  const [alerts,setAlerts] = useState([])\n  const [uploaded, setUploaded] = useState(false)\n  const [loader, setLoader] = useState(false)\n  const hide = (typeof alerts === \"object\" && !Object.keys(alerts).length)\n  const show =  ! hide && uploaded && !loader\n\n  useEffect(() => {\n    let intervalId\n    const refreshTable = async () => {\n      if (uploaded) {\n        const alerts = await Api.getAlerts()\n        setAlerts(alerts.data)  \n        }\n    }\n\n    delayedCall(uploaded, setLoader, refreshTable)\n    intervalId = setInterval(\n      () => delayedCall(uploaded, setLoader, refreshTable)\n    , 60000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n}, [uploaded])\n\n  return (\n    <>\n    <Header />\n    <Box m={3}>\n      <Upload setUploaded={setUploaded}/>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" m={4}>\n      { loader && <CircularProgress />}\n      </Box>\n      { show && <AlertsTable alerts={alerts}/>}\n    </Box>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}